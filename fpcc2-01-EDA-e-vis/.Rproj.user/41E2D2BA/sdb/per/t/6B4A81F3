{
    "contents" : "---\ntitle: \"Clustering\"\nauthor: \"Nazareno Andrade\"\ndate: \"30 de março de 2016\"\noutput: html_document\n---\n\n```{r, message=FALSE}\nrequire(ggplot2, quietly = TRUE)\nrequire(GGally, quietly = TRUE)\nrequire(reshape2, quietly = TRUE)\nrequire(dplyr, quietly = TRUE)\nlibrary(ggfortify)\nlibrary(cluster)\nlibrary(ggdendro)\ntheme_set(theme_bw())\nsource(\"github-lib.R\")\n```\n\n```{r}\ndw <- load_github_wide()\nsummary(dw)\n\nggpairs(select(dw, -repository_language))\n# XML e Bluespec têm mais de 50 pushes / repositório e \n# outras linguagens têm também números estranhos. Filtraremos.\ndw <- dw %>% \n  filter(PushEvent < 50, IssuesEvent < 50, ForkEvent < 18)\n```\n\nAs variáveis são bastante assimétricas e concentradas em pequenos valores. Transformá-las para log ajuda na visualização.\n\n```{r}\n# Escala de log \ndw2 <- log(dw[,2:5])\ndw2$repository_language <- dw$repository_language\nggpairs(select(dw2, -repository_language))\n\nsummary(select(dw2, -repository_language))\ndw2.scaled = scale(select(dw2, -repository_language))\ndw2.scaled = select(dw2, -repository_language) %>% \n  mutate_each(funs(scale))\n```\n\n\n```{r}\ndists = dist(dw2.scaled, method = \"euclidean\")\nhc = hclust(dists, method = \"ward.D\")\n\nplot(hc, hang = -1)\nrect.hclust(hc, k=6)\n\ndw2$cluster = factor(cutree(hc, k=6))\n\ndw2.scaled$repository_language = dw2$repository_language\ndw2.scaled$cluster = factor(cutree(hc, k=6))\n\ndw2.long = melt(dw2.scaled, id.vars = c(\"repository_language\", \"cluster\"))\n\nggplot(dw2.long, aes(x = variable, y = value, colour = variable)) + \n  geom_boxplot() + \n  geom_point(alpha = 0.2, position = position_jitter(width = .2)) + \n  facet_wrap(~ cluster) \n\nplot(silhouette(cutree(hc, k = 6), dists))\n\n```\n\n## k-means\n\n```{r}\ntoclust = select(dw2.scaled, 1:4)\nrow.names(toclust) = dw2.scaled$repository_language\ndists = dist(toclust)\n\nkm <- kmeans(toclust, centers = 6, nstart = 10)\n\nautoplot(km, data = dw2.scaled, size = 3)\nautoplot(km, data = dw2.scaled, label = TRUE)\nplot(silhouette(km$cluster, dists))\n\ndw2.scaled$kmcluster = km$cluster\ndw2.long = melt(dw2.scaled, id.vars = c(\"repository_language\", \"cluster\", \"kmcluster\"))\n\nggplot(dw2.long, aes(x = variable, y = value, colour = variable)) + \n  geom_boxplot() + \n  geom_point(alpha = 0.2, position = position_jitter(width = .2)) + \n  facet_wrap(~ kmcluster) \n\ntable(dw2.scaled$kmcluster)\n\ndw2.scaled[dw2.scaled$kmcluster == '1',]$repository_language\n\ndw2.scaled[dw2.scaled$kmcluster == '6',]$repository_language\n```\n\n\n--------------------\n\n# Exemplo\n\nO dataset ruspini é clássico para ilustrar agrupamento.\n\n```{r}\nstr(ruspini)\n\nggplot(ruspini, aes(x = x, y = y)) + \n  geom_point(size = 3)\n\ncolMeans(ruspini)\n\nrs <- data.frame(scale(ruspini))\ncolMeans(rs)\n\nggplot(rs, aes(x = x, y = y)) + \n  geom_point(size = 3)\n\n```\n\n## Hierárquico\n\n```{r}\ndists = dist(rs, method = \"euclidean\")\nhc = hclust(dists, method = \"ward.D\")\n\nplot(hc, hang = -1)\n\nrect.hclust(hc, k=4)\n\nrs$cluster = factor(cutree(hc, k=4))\n\nggplot(rs, aes(x = x, y = y, colour = cluster)) + \n  geom_point(size = 3) \n\nrs$cluster = factor(cutree(hc, k=8))\nggplot(rs, aes(x = x, y = y, colour = cluster, label = cluster)) + \n  geom_point(size = 2) + \n  geom_text(hjust = -.1, vjust = 1)\n\nplot(silhouette(cutree(hc, k = 4), dists))\n\n#heatmap(as.matrix(dw2[,1:4]), Colv=F, scale='none')\n#hc.data <- dendro_data(hc)\n#ggdendrogram(hc.data, rotate = TRUE) + \n  #labs(title = \"Agrupamento de Rustini\")\n```\n\n## K-means\n\n```{r}\nkm <- kmeans(rs, centers=4, nstart=10)\nkm\n\nautoplot(km, data = rs)\n\nautoplot(km, data = rs, frame = TRUE)\n\n```\n\n",
    "created" : 1459377282833.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "147024331",
    "id" : "6B4A81F3",
    "lastKnownWriteTime" : 1459432276,
    "path" : "~/workspace/fpcc2-01-vars-escalas/clustering.Rmd",
    "project_path" : "clustering.Rmd",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}